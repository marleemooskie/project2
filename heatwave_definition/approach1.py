# This script will explore the different approaches for the definition of heatwaves# Importing packagesimport osimport pandas as pdimport numpy as np# Settings# Setting all columns to be printedpd.set_option('display.max_columns', None)# Import data: starting with US-Whs sitedata = pd.read_csv('/Users/marleeyork/Documents/project2/data/AMF_US-Whs_FLUXNET_SUBSET_HH_2007-2020_3-5.csv')print(data.head())# DATA EXPLORATION ############################################################# Checking to see if I am working with continuous data: data is continuous# Convert to datetime just to be safedata['timestamp'] = pd.to_datetime(data['TIMESTAMP_START'], format='%Y%m%d%H%M')# Set as indexdata = data.set_index('timestamp')# Generate the full expected rangefull_range = pd.date_range(start=data.index.min(), end=data.index.max(), freq='H')# Comparemissing = full_range.difference(data.index)if len(missing) == 0:    print("All timestamps are continuous.")else:    print(f"⚠️ Missing {len(missing)} timestamps:")    print(missing)# Checking for any missing temperature values: None missingdata.isna().sum()# FUNCTIONS #################################################################### This function will take in a datetime stamp (date_vector) and temperature (temperature_vector),# and return a dataframe of date and the maximum temperature associated for that day. # It takes in 30 min or hourly data, aggregates by day, and calculates the summary # maximum summary statistic.def find_max_temperatures(date_vector, temperature_vector):    temp_df = pd.DataFrame({'timestamp': date_vector,                            'temperature': temperature_vector})    max_temperatures = temp_df.groupby(temp_df['timestamp'].dt.date).agg({'temperature': ['max']})        return max_temperatures# This function will take in a datetime stamp (date_vector) and temperature (temperature_vector),# and return a dataframe of date and the minimum temperature associated for that day. # It takes in 30 min or hourly data, aggregates by day, and calculates the summary # minimum summary statistic.def find_min_temperatures(date_vector, temperature_vector):    temp_df = pd.DataFrame({'timestamp': date_vector,                            'temperature': temperature_vector})    min_temperatures = temp_df.groupby(temp_df['timestamp'].dt.date).agg({'temperature': ['min']})        return min_temperatures# This function will     