# I'm using this script to test my heatwave definitions across all my sitesimport pandas as pdfrom matplotlib import pyplot as pltfrom load_data import *from define_heatwaves import *# Print all columnspd.set_option('display.max_columns',None)# pd.set_option('display.max_rows',None) # be careful with this, can back up system# Load climatological datahistorical_data_max = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_wide_tmax.csv')historical_data_max.date = pd.to_datetime(historical_data_max.date)historical_data_min = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_tmin_data_wide.csv')historical_data_min.date = pd.to_datetime(historical_data_min.date)historical_data_Tmean = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_tmean.csv')historical_data_Tmean.date = pd.to_datetime(historical_data_Tmean.date)# Chcking what soil water content variables the sites haveswc_measures = ["SWC_F_MDS_1","SWC_F_MDS_2","SWC_F_MDS_3","SWC_F_MDS_4","SWC_F_MDS_5",                "SWC_F_MDS_1_QC","SWC_F_MDS_2_QC","SWC_F_MDS_3_QC","SWC_F_MDS_4_QC",                "SWC_F_MDS_5_QC"]shared_swc = find_shared_variables('/Users/marleeyork/Documents/project2/data/AMFdataDD',swc_measures)# Load in AmeriFlux hourly temperature dataAMF_data = loadAMF(path="/Users/marleeyork/Documents/project2/data/AMFdata_HH",                   measures=['TIMESTAMP_START','TA_F'])# Load in AmeriFlux daily moisture dataprec_data = loadAMF(path='/Users/marleeyork/Documents/project2/data/AMFdataDD',                    measures=['TIMESTAMP','P_F'])swc_data = loadAMF(path='/Users/marleeyork/Documents/project2/data/AMFdataDD',                   skip='/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-Ha1_FLUXNET_SUBSET_DD_1991-2020_3-5.csv',                   measures=['TIMESTAMP','SWC_F_MDS_1'])# There is missing data in swc_data, so we are going to remove thoseswc_data = swc_data[swc_data['SWC_F_MDS_1'] != -9999]#################################################################################                                  MAX                                      #################################################################################'''The following code will fit heatwaves using the maximum approach discussed in Perkins and Alexander. It uses the max temperature for each day and comparesit to a quantile of historical maximum temperature over a certain moving window.I use the parameters most commonly used across the literature (e.g. 15 day movingaverage, 90th quantile, tolerance, etc). The daily max temperatures (not historical ones) are calculated using flux tower data at the hourly interval, thuswe use hourly data as the timeseries input in fit_heatwaves. This is differentfor other approaches!'''# Initialize empty dictionaryheatwaves = {}for site in AMF_data.Site.unique():    # Isolate site of interest in climatological and AMF data    historical_site_data = historical_data_max[['date',site]]    flux_data = AMF_data[AMF_data['Site']==site]    site_precip = prec_data[prec_data['Site']==site]    site_swc = swc_data[swc_data['Site']==site]        # Fit the heatwave defining function    site_heatwaves = fit_heatwaves(                      flux_dates = flux_data.TIMESTAMP_START,                       flux_temperature = flux_data.TA_F,                       historical_dates = historical_site_data['date'],                       historical_temperature = historical_site_data[site],                      quantile_threshold = .9,                      window_length = 15,                      threshold_comparison = 'greater',                      min_heatwave_length = 5,                      tolerance = 1,                      gap_days_window = 8,                      site = site,                      method = "max"                      )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves[site] = site_heatwaves    heatwaves[site]['precip'] = site_heatwave_precip    heatwaves[site]['swc'] = site_heatwave_swc    # For each site, plot the heatwavesfor site in AMF_data.Site.unique():    print(heatwaves[site]['summary'])    plt.show(heatwaves[site]["plot"])        # input("Press [enter] to continue...") # careful with this, can break things# Create a dataframe of all precip conditionsall_precip = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site','Duration'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves[site]['precip']    # Add a site column    site_data['Site'] = [site]*len(site_data)    site_data['Duration'] = heatwaves[site]['summary'].duration    # Concat site data with all other data    all_precip = pd.concat([all_precip,site_data])    # Same for all SWC conditionsall_swc = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves[site]['swc']    # Add a site column    site_data['Site'] = [site]*len(site_data)    # Concat site data with all other data    all_swc = pd.concat([all_swc,site_data])all_swc = all_swc.dropna()# Plot distributions of all moisture datafig, ax = plt.subplots(1,3,figsize=(12,4))ax[0].set_title('Total Precipitation')ax[0].set_xlabel('Precipitation (mm)')ax[0].hist(all_precip['moisture_total'],bins=30)ax[1].hist(all_precip['moisture_average'],bins=30)ax[1].set_title('Average Precipitation')ax[1].set_xlabel('Precipitation (mm)')ax[2].hist(all_swc['moisture_average'],bins=30)ax[2].set_title('Average SWC')ax[2].set_xlabel('Precipitation (mm)')plt.show()# Histogram of durationfig, ax = plt.subplots()plt.hist(all_precip['Duration'])plt.show()#################################################################################                                  EHF                                      #################################################################################'''The following code will fit heatwaves using the EHF approach described in Nairn 2015.Still working on getting this approach to work.'''# Trying the EHF approach daily_AMF_TA = loadAMF(path="/Users/marleeyork/Documents/project2/data/AMFdataDD",                   measures=['TIMESTAMP','TA_F'])heatwaves_EHF = {}for site in daily_AMF_TA.Site.unique():    # Isolate site of interest in climatological and AMF data    historical_site_data = historical_data_Tmean[['date',site]]    flux_data = daily_AMF_TA[daily_AMF_TA['Site']==site]    site_precip = prec_data[prec_data['Site']==site]    site_swc = swc_data[swc_data['Site']==site]        # Fit the heatwave defining function    site_heatwaves = fit_heatwaves(                      flux_dates = flux_data.TIMESTAMP,                       flux_temperature = flux_data.TA_F,                       historical_dates = historical_site_data['date'],                       historical_temperature = historical_site_data[site],                      quantile_threshold = .95,                      window_length = 3,                      threshold_comparison = 'greater',                      min_heatwave_length = 3,                      tolerance = 0,                      gap_days_window = 0,                      site = site,                      method = "EHF"                      )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves_EHF[site] = site_heatwaves    heatwaves_EHF[site]['precip'] = site_heatwave_precip    heatwaves_EHF[site]['swc'] = site_heatwave_swc# Print each of the heatwave summarysfor site in heatwaves_EHF.keys():    print(heatwaves_EHF[site]['summary'])    plt.show(heatwaves_EHF[site]["plot"])#################################################################################                                Pezza                                      #################################################################################'''The code below implements the Pezza 2012 heatwave defining approach. This approachuses a 3 day running maximum and minimum temperature threshold to determine heatwaves. '''# Need to load in minimum and maximum historical temperatures# Load climatological datahistorical_data_max = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_wide_tmax.csv')historical_data_max.date = pd.to_datetime(historical_data_max.date)historical_data_min = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_tmin_data_wide.csv')# Initialize empty dictionaryheatwaves_Pezza = {}for site in AMF_data.Site.unique():    # Isolate site of interest in climatological and AMF data    historical_temp_max = historical_data_max[['date',site]]    historical_temp_min = historical_data_min[['date',site]]    site_precip = prec_data[prec_data['Site']==site]    site_swc = swc_data[swc_data['Site']==site]    flux_data = AMF_data[AMF_data['Site']==site]        # Fit the heatwave defining function    site_heatwaves = fit_Pezza_heatwaves(        flux_dates = flux_data.TIMESTAMP_START,         flux_temperature = flux_data.TA_F,         historical_dates = historical_data_max.date,         historical_temperature_max = historical_temp_max[site],        historical_temperature_min = historical_temp_min[site],        min_heatwave_length = 3,        site = site        )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves_Pezza[site] = site_heatwaves    heatwaves_Pezza[site]['precip'] = site_heatwave_precip    heatwaves_Pezza[site]['swc'] = site_heatwave_swc# Print each of the heatwave summarysfor site in heatwaves_Pezza.keys():    print(heatwaves_Pezza[site]['summary'])    plt.show(heatwaves_Pezza[site]["plot"])    # Create a dataframe of all precip conditionsall_precip_Pezza = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site','Duration'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_Pezza[site]['precip']    # Add a site column    site_data['Site'] = [site]*len(site_data)    site_data['Duration'] = heatwaves_Pezza[site]['summary'].duration    # Concat site data with all other data    all_precip_Pezza = pd.concat([all_precip_Pezza,site_data])    # Same for all SWC conditionsall_swc_Pezza = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_Pezza[site]['swc']    # Add a site column    site_data['Site'] = [site]*len(site_data)    # Concat site data with all other data    all_swc = pd.concat([all_swc_Pezza,site_data])all_swc_Pezza = all_swc_Pezza.dropna()# Plot distributions of all moisture datafig, ax = plt.subplots(1,3,figsize=(12,4))ax[0].set_title('Total Precipitation')ax[0].set_xlabel('Precipitation (mm)')ax[0].hist(all_precip['moisture_total'],bins=30)ax[1].hist(all_precip['moisture_average'],bins=30)ax[1].set_title('Average Precipitation')ax[1].set_xlabel('Precipitation (mm)')ax[2].hist(all_swc['moisture_average'],bins=30)ax[2].set_title('Average SWC')ax[2].set_xlabel('Precipitation (mm)')plt.show()# Histogram of durationfig, ax = plt.subplots()plt.hist(all_precip['Duration'])plt.show()