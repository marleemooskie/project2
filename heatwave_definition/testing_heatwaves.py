'''This script will be used to define heatwaves using the max, EHF, and Pezza definition approaches. For analysis of these, refer to moisture comparison.'''# Set working directoryimport osos.chdir("/Users/marleeyork/Documents/project2/heatwave_definition")# Import all other packagesimport pandas as pdfrom matplotlib import pyplot as pltfrom load_data import *from define_heatwaves import *# Print all columnspd.set_option('display.max_columns',None)# pd.set_option('display.max_rows',None) # be careful with this, can back up system# Load climatological datahistorical_data_max = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_wide_tmax.csv')historical_data_max.date = pd.to_datetime(historical_data_max.date)historical_data_min = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_tmin_data_wide.csv')historical_data_min.date = pd.to_datetime(historical_data_min.date)historical_data_Tmean = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_tmean.csv')historical_data_Tmean.date = pd.to_datetime(historical_data_Tmean.date)# Chcking what soil water content variables the sites haveswc_measures = ["SWC_F_MDS_1","SWC_F_MDS_2","SWC_F_MDS_3","SWC_F_MDS_4","SWC_F_MDS_5",                "SWC_F_MDS_1_QC","SWC_F_MDS_2_QC","SWC_F_MDS_3_QC","SWC_F_MDS_4_QC",                "SWC_F_MDS_5_QC"]shared_swc = find_shared_variables('/Users/marleeyork/Documents/project2/data/AMFdataDD',swc_measures)# Load in AmeriFlux hourly temperature dataAMF_data = loadAMF(path="/Users/marleeyork/Documents/project2/data/AMFdata_HH",                   measures=['TIMESTAMP_START','TA_F'])# We are going to remove the sites that don't have SWC_F_MDS_1sites_missing_swc = shared_swc['site_presence'][shared_swc['site_presence']['SWC_F_MDS_1']==0].SiteAMF_data = AMF_data[~AMF_data['Site'].isin(sites_missing_swc)]# Load in AmeriFlux daily moisture dataprec_data = loadAMF(path='/Users/marleeyork/Documents/project2/data/AMFdataDD',                    measures=['TIMESTAMP','P_F'])swc_data = loadAMF(path='/Users/marleeyork/Documents/project2/data/AMFdataDD',                   skip=['/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-Ha1_FLUXNET_SUBSET_DD_1991-2020_3-5.csv',                         '/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-Vcp_FLUXNET_SUBSET_DD_2007-2024_5-7.csv',                         '/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-KS2_FLUXNET_SUBSET_DD_1999-2006_3-5.csv',                         '/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-Wjs_FLUXNET_SUBSET_DD_2007-2024_4-7.csv',                         '/Users/marleeyork/Documents/project2/data/AMFdataDD/AMF_US-Mpj_FLUXNET_SUBSET_DD_2008-2024_4-7.csv'],                   measures=['TIMESTAMP','SWC_F_MDS_1'])# There is missing data in swc_data, so we are going to remove thoseswc_data = swc_data[swc_data['SWC_F_MDS_1'] != -9999]#################################################################################                                  MAX                                      #################################################################################'''The following code will fit heatwaves using the maximum approach discussed in Perkins and Alexander. It uses the max temperature for each day and comparesit to a quantile of historical maximum temperature over a certain moving window.I use the parameters most commonly used across the literature (e.g. 15 day movingaverage, 90th quantile, tolerance, etc). The daily max temperatures (not historical ones) are calculated using flux tower data at the hourly interval, thuswe use hourly data as the timeseries input in fit_heatwaves. This is differentfor other approaches!'''# I am going to create a tmax based on the timeseries data that I can use in # replacement of PRISM tmax temporarily as historical data. This will change when # I get the PRISM data for all 45 sites# Initialize empty dictionaryheatwaves = {}for site in AMF_data.Site.unique():    # Isolate site of interest in climatological and AMF data    # historical_site_data = historical_data_max[['date',site]]    flux_data = AMF_data[AMF_data['Site']==site]    tmax = find_max_temperatures(flux_data.TIMESTAMP_START, flux_data.TA_F) # remove when you get historical data    site_precip = prec_data[prec_data['Site']==site]    site_swc = swc_data[swc_data['Site']==site]        # Fit the heatwave defining function    site_heatwaves = fit_heatwaves(                      flux_dates = flux_data.TIMESTAMP_START,                       flux_temperature = flux_data.TA_F,                       # historical_dates = historical_site_data['date'],                       historical_dates = tmax.date, # remove when you get historical data                      # historical_temperature = historical_site_data[site],                      historical_temperature = tmax.max_temperature, # remove when you get historical data                      quantile_threshold = .9,                      window_length = 15,                      threshold_comparison = 'greater',                      min_heatwave_length = 5,                      tolerance = 1,                      gap_days_window = 8,                      site = site,                      method = "max"                      )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves[site] = site_heatwaves    heatwaves[site]['precip'] = site_heatwave_precip    heatwaves[site]['swc'] = site_heatwave_swc# Create a dataframe of all precip conditionsall_precip = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site','Duration'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves[site]['precip']    # Add a site column    site_data['Site'] = [site]*len(site_data)    site_data['Duration'] = heatwaves[site]['summary'].duration    # Concat site data with all other data    all_precip = pd.concat([all_precip,site_data])    # Same for all SWC conditionsall_swc = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves[site]['swc']    # Add a site column    site_data['Site'] = [site]*len(site_data)    # Concat site data with all other data    all_swc = pd.concat([all_swc,site_data])all_swc = all_swc.dropna()#################################################################################                                  EHF                                      #################################################################################'''The following code will fit heatwaves using the EHF approach described in Nairn 2015.Still working on getting this approach to work.'''# Trying the EHF approach daily_AMF_TA = loadAMF(path="/Users/marleeyork/Documents/project2/data/AMFdataDD",                   measures=['TIMESTAMP','TA_F'])heatwaves_EHF = {}for site in daily_AMF_TA.Site.unique():    # Isolate site of interest in climatological and AMF data    # Temporarily changing historical data to be the timeseries data so I can get    # a rough estimate of the moisture conditions during the heatwaves    historical_site_data = daily_AMF_TA[daily_AMF_TA['Site']==site][['TIMESTAMP','TA_F']] # Replace this for the following in the future    # historical_site_data = historical_data_Tmean[['date',site]].copy()    flux_data = daily_AMF_TA[daily_AMF_TA['Site']==site].copy()    site_precip = prec_data[prec_data['Site']==site].copy()    site_swc = swc_data[swc_data['Site']==site].copy()        # Fit the heatwave defining function    site_heatwaves = fit_heatwaves(                      flux_dates = flux_data.TIMESTAMP,                       flux_temperature = flux_data.TA_F,                       historical_dates = historical_site_data.TIMESTAMP, # replace with below                      # historical_dates = historical_site_data['date'],                       historical_temperature = historical_site_data.TA_F, # replace with below                      # historical_temperature = historical_site_data[site],                      quantile_threshold = .95,                      window_length = 3,                      threshold_comparison = 'greater',                      min_heatwave_length = 5,                      tolerance = 0,                      gap_days_window = 0,                      site = site,                      method = "EHF"                      )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves_EHF[site] = site_heatwaves    heatwaves_EHF[site]['precip'] = site_heatwave_precip    heatwaves_EHF[site]['swc'] = site_heatwave_swc    # Create a dataframe of all precip conditionsall_precip_EHF = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site','Duration'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_EHF[site]['precip']    # Add a site column    site_data['Site'] = [site]*len(site_data)    site_data['Duration'] = heatwaves_EHF[site]['summary'].duration    # Concat site data with all other data    all_precip_EHF = pd.concat([all_precip_EHF,site_data])    # Same for all SWC conditionsall_swc_EHF = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_EHF[site]['swc']    # Add a site column    site_data['Site'] = [site]*len(site_data)    # Concat site data with all other data    all_swc_EHF = pd.concat([all_swc_EHF,site_data])all_swc_EHF = all_swc_EHF.dropna()#################################################################################                                Pezza                                      #################################################################################'''The code below implements the Pezza 2012 heatwave defining approach. This approachuses a 3 day running maximum and minimum temperature threshold to determine heatwaves. '''# Need to load in minimum and maximum historical temperatures# Load climatological datahistorical_data_max = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_climate_data_wide_tmax.csv')historical_data_max.date = pd.to_datetime(historical_data_max.date)historical_data_min = pd.read_csv('/Users/marleeyork/Documents/project2/data/PRISM/extracted_daily_tmin_data_wide.csv')# Initialize empty dictionaryheatwaves_Pezza = {}for site in AMF_data.Site.unique():    flux_data = AMF_data[AMF_data['Site']==site]    # Isolate site of interest in climatological and AMF data    # historical_temp_max = historical_data_max[['date',site]]    # historical_temp_min = historical_data_min[['date',site]]    tmax = find_max_temperatures(flux_data.TIMESTAMP_START, flux_data.TA_F) # remove this when you get historical data    tmin = find_min_temperatures(flux_data.TIMESTAMP_START, flux_data.TA_F) # remove this wehn you get historical data    site_precip = prec_data[prec_data['Site']==site]    site_swc = swc_data[swc_data['Site']==site]        print(f"I'm currently on site {site}.")    # Fit the heatwave defining function    site_heatwaves = fit_Pezza_heatwaves(        flux_dates = flux_data.TIMESTAMP_START,         flux_temperature = flux_data.TA_F,         # historical_dates = historical_data_max.date,         # historical_temperature_max = historical_temp_max[site],        # historical_temperature_min = historical_temp_min[site],        # remove when you get historical data        historical_temperature_max = tmax.max_temperature, # remove when you get historical data        historical_temperature_min = tmin.min_temperature, # remove when you get historical data        historical_dates = tmax.date,        min_heatwave_length = 5,        tolerance=1,        gap_day_window=8,        site = site        )        # Getting precipitation conditions    site_heatwave_precip = calculate_moisture(        timeseries_dates = site_precip.TIMESTAMP,        timeseries_moisture = site_precip.P_F,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        site_heatwave_swc = calculate_moisture(        timeseries_dates = site_swc.TIMESTAMP,        timeseries_moisture = site_swc.SWC_F_MDS_1,        start_dates = site_heatwaves['start_dates'],        end_dates = site_heatwaves['end_dates']        )        # Add heatwaves into a dictionary with their site    heatwaves_Pezza[site] = site_heatwaves    heatwaves_Pezza[site]['precip'] = site_heatwave_precip    heatwaves_Pezza[site]['swc'] = site_heatwave_swc# Create a dataframe of all precip conditionsall_precip_Pezza = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site','Duration'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_Pezza[site]['precip']    # Add a site column    site_data['Site'] = [site]*len(site_data)    site_data['Duration'] = heatwaves_Pezza[site]['summary'].duration    # Concat site data with all other data    all_precip_Pezza = pd.concat([all_precip_Pezza,site_data])    # Same for all SWC conditionsall_swc_Pezza = pd.DataFrame(columns=['start_date','end_date','moisture_average','moisture_total','Site'])for site in AMF_data.Site.unique():    # Pull out moisture for the site    site_data = heatwaves_Pezza[site]['swc']    # Add a site column    site_data['Site'] = [site]*len(site_data)    # Concat site data with all other data    all_swc_Pezza = pd.concat([all_swc_Pezza,site_data])all_swc_Pezza = all_swc_Pezza.dropna()    